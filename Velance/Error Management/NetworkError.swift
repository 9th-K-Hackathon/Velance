import Foundation
import SwiftyJSON

enum NetworkError: Int, Error {
    
    case success        = 200

    // ÏûòÎ™ªÎêú Ï†ëÍ∑º or ÏöîÏ≤≠
    case badRequest     = 400
    case unauthorized   = 401
    case notFound       = 404
    
    // Server Î¨∏Ï†ú
    case internalError  = 500
    
    var errorDescription: String {
        
        switch self {
        
        case .success:
            return "ÏÑ±Í≥µ"
        case .badRequest:
            return "ÏùºÏãúÏ†ÅÏù∏ Ïò§Î•òÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöîüò¢"
        case .internalError:
            return "ÏùºÏãúÏ†ÅÏù∏ ÏÑúÎπÑÏä§ Ïò§Î•òÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöîüò¢"
        case .notFound:
            return "ÏöîÏ≤≠ÌûàÏã† ÏûëÏóÖÏùÑ Ï≤òÎ¶¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöîüò¢ "
        case .unauthorized:
            return "Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌïú Í∏∞Îä•ÏûÖÎãàÎã§.üßê"
        }
    }
    
    static func returnError(statusCode: Int, responseData: Data? = nil) -> NetworkError {
        
        print("‚ùóÔ∏è Network Error - status code : \(statusCode)")
        if let data = responseData {
            print("‚ùóÔ∏è Network Error - error : \(String(data: data, encoding: .utf8) ?? "error encoding error")")
        }
    
        if statusCode == 401 {

//            User.shared.isLoggedIn ?
//                NotificationCenter.default.post(name: .refreshTokenExpired, object: nil) :
//                NotificationCenter.default.post(name: .presentWelcomeVC, object: nil)
        }
        return NetworkError(rawValue: statusCode) ?? .internalError
    }
}
